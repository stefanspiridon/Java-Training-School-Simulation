import java.io.File;
import java.io.FileNotFoundException;
import java.util.Iterator;
import java.util.Random;
import java.util.Scanner;


//This class will have a
//School, will organise the day to day running of the School,
//i.e. run the simulation itself.
public class Administrator {

    //instance variable of a school class
    private School school;

    //method which is used to run the simulation
    private void run(){

        //random number to  decide the number of
        //the students joining the school (up to 2)
        Random randomStudent = new Random();
        int numOfStudents = randomStudent.nextInt(3);

        //loop that adds a new preset student the amount of times generated by "randomStudent"
        for(int studentAdmitted=0; studentAdmitted < numOfStudents; studentAdmitted++){
            Student student = new Student("randomStudent", 'M', 18 );
            school.add(student);
        }

        //there is a 20% chance that a new preset Teacher joins the school everyday
        Random randomTeacher = new Random();
        if(randomTeacher.nextInt(100) < 20){
            Teacher teacher = new Teacher("randomTeacher", 'F', 50);
            school.add(teacher);
        }

        //there is a 10% chance that a new preset Demonstrator joins the school everyday
        Random randomDemonstrator = new Random();
        if(randomDemonstrator.nextInt(100) < 10){
            Demonstrator demonstrator = new Demonstrator("randomDemonstrator", 'F', 23);
            school.add(demonstrator);
        }

        //there is a 5% chance that a new preset OOTrainer joins the school everyday
        Random randomOOTrainer = new Random();
        if(randomOOTrainer.nextInt(100) < 5){
            OOTrainer ooTrainer = new OOTrainer("randomOOTrainer", 'M', 30);
            school.add(ooTrainer);
        }

        //there is a 5% chance that a new preset GUITrainer joins the school everyday
        Random randomGUITrainer = new Random();
        if(randomGUITrainer.nextInt(100) < 5){
            GUITrainer guiTrainer = new GUITrainer("randomGUITrainer", 'M', 30);
            school.add(guiTrainer);
        }

        //Run the school
        school.aDayAtSchool();

        //iterator that loops over the instructor list of the school
        Iterator<Instructor> instructorIterator = school.getInstructors().iterator();

        //loops over the instructor list
        while(instructorIterator.hasNext()){
            Instructor instructor = instructorIterator.next();

            //if the instructor has no assigned course
            if (instructor.getAssignedCourse() == null) {

                //there is a 20% chance the instructor will leave the school
                Random randomInstructorLeave = new Random();
                if (randomInstructorLeave.nextInt(100) < 20) {
                    instructorIterator.remove();
                    System.out.println("The instructor named " + instructor.getName() + "has left the school\n");
                }
            }
        }

        //iterator that loops over the student list of the school
        Iterator<Student> studentIterator = school.getStudents().iterator();

        //loops ove the student list
        while(studentIterator.hasNext()){
            Student student = studentIterator.next();

            //if the student has all the certificates than he will leave the school
            if(student.getCertificates().size()==school.getSubjects().size()){
                studentIterator.remove();
                System.out.println("The student named " + student.getName() + "has left because he has all certificates\n");
            }else {
                //if the student isn't enrolled on any course there is a 5% chance he will leave the school
                if (student.getCourseEnrolledOn() == null) {
                    Random randomStudentLeave = new Random();
                    if (randomStudentLeave.nextInt(100) < 5) {
                        studentIterator.remove();
                        System.out.println("The student named " + student.getName() + "has left the school\n");
                    }
                }
            }
        }
    }

    //overloaded version of run() that takes a number of days as a parameter, and simulates that number of days.
    void run(int numOfDays){

        //After each day it calls toString on the school to list information about courses
        //(including course status, list of enrolled students), students (certificates, enrolled course if any) and
        //instructors (assigned course if any).
        for(int day=0; day < numOfDays; day++){
            this.run();
            System.out.println("------DAY " + (day + 1) + "------\n" + school.toString());
        }
    }

    //method that reads the simulation configuration file, that has a specific format in order
    //to be read correctly by the code:
    //The format for the school is
    //School:name
    //The format for Subjects is
    //subject:description,subjectID,specialisationID,duration
    //The format for Students is
    //student:name,gender,age
    //The format for Instructors is
    //instructor_type:name,gender,age
    void read(String fileName)  {

        //create a new file object
        File file = new File(fileName);

        //create a new scanner object
        Scanner scanner = null;
        try {
            //initialise the new scanner object
            scanner = new Scanner(file);
        } catch (FileNotFoundException e) {
            //catches the FileNotFoundExeption
            System.out.println("Error! File not found.");
            e.printStackTrace();
        }

        //loops over the file and stores each line in a string
        while(scanner.hasNextLine()){

            //string that contains each line in the file
            String currentLine = scanner.nextLine();

            //if the string starts with "school" that means that it's the format of a school object
            if(currentLine.startsWith("school")){

                //use substring to store the school's name from the index of ":" onwards
                String schoolName = currentLine.substring(currentLine.indexOf(":")+1);

                //create a new school object with the name read from the file
                school = new School(schoolName);
            }

            //if the string starts with "subject" that means that it's the format of a subject object
            if(currentLine.startsWith("subject")){

                //split the string by the "," regex and store each part into an array of strings
                String[] subjectArray = currentLine.split(",");

                //the format of a subject is subject:description,subjectID,specialisationID,duration
                //the string with index 1 in the array is the id
                int id = Integer.parseInt(subjectArray[1]) ;

                //the string with index 2 is the specialism
                int specialism = Integer.parseInt(subjectArray[2]);

                //th string with index 3 is the duration
                int duration = Integer.parseInt(subjectArray[3]);

                //create a new subject object with info from the file
                Subject subject = new Subject(id, specialism, duration);

                //use substring to store the subject's description from the index of ":" onwards
                String description = subjectArray[0].substring(subjectArray[0].indexOf(":")+1);

                //assign the description read from the file to the subject
                subject.setDescription(description);

                //add the subject to the school
                school.add(subject);
            }

            //if the string starts with "student" that means that it's the format of a student object
            if(currentLine.startsWith("student")){

                //split the string by the "," regex and store each part into an array of strings
                String[] studentArray = currentLine.split(",");

                //the format of a student is student:name,gender,age
                //the string with index 1 in the array is the name
                String name = studentArray[0].substring(studentArray[0].indexOf(":")+1);

                //the string with index 1 is the gender
                char gender = studentArray[1].charAt(0);

                //the string with index 2 is the age
                int age = Integer.parseInt(studentArray[2]);

                //create a new student object with info from the file
                Student student = new Student(name, gender, age);

                //add the student to the school
                school.add(student);
            }

            //if the string starts with "Teacher" that means that it's the format of a teacher object
            if(currentLine.startsWith("Teacher")){

                //split the string by the "," regex and store each part into an array of strings
                String[] instructorArray = currentLine.split(",");

                //the format of an instructor is instructor_type:name,gender,age
                //the string with index 1 in the array is the name
                String name = instructorArray[0].substring(instructorArray[0].indexOf(":")+1);

                //the string with index 1 is the gender
                char gender = instructorArray[1].charAt(0);

                //the string with index 2 is the age
                int age = Integer.parseInt(instructorArray[2]);

                //create a new teacher object with the info from the file
                Teacher teacher = new Teacher(name, gender, age);

                //add the teacher to the school
                school.add(teacher);
            }

            //if the string starts with "Demonstrator" that means that it's the format of a demonstrator object
            if(currentLine.startsWith("Demostrator")){

                //split the string by the "," regex and store each part into an array of strings
                String[] instructorArray = currentLine.split(",");

                //the format of an instructor is instructor_type:name,gender,age
                //the string with index 1 in the array is the name
                String name = instructorArray[0].substring(instructorArray[0].indexOf(":")+1);

                //the string with index 1 is the gender
                char gender = instructorArray[1].charAt(0);

                //the string with index 2 is the age
                int age = Integer.parseInt(instructorArray[2]);

                //create a new Demonstrator object with the info from the file
                Demonstrator demonstrator = new Demonstrator(name, gender, age);

                //add the demonstrator to the school
                school.add(demonstrator);
            }

            //if the string starts with "OOTrainer" that means that it's the format of a OOTrainer object
            if(currentLine.startsWith("OOTrainer")){

                //split the string by the "," regex and store each part into an array of strings
                String[] instructorArray = currentLine.split(",");

                //the format of an instructor is instructor_type:name,gender,age
                //the string with index 1 in the array is the name
                String name = instructorArray[0].substring(instructorArray[0].indexOf(":")+1);

                //the string with index 1 is the gender
                char gender = instructorArray[1].charAt(0);

                //the string with index 2 is the age
                int age = Integer.parseInt(instructorArray[2]);

                //create a new OOTrainer object with the info from the file
                OOTrainer ooTrainer = new OOTrainer(name, gender, age);

                //add the OOTrainer to the school
                school.add(ooTrainer);
            }

            //if the string starts with "GUITrainer" that means that it's the format of a GUITrainer object
            if(currentLine.startsWith("GUITrainer")){

                //split the string by the "," regex and store each part into an array of strings
                String[] instructorArray = currentLine.split(",");

                //the format of an instructor is instructor_type:name,gender,age
                //the string with index 1 in the array is the name
                String name = instructorArray[0].substring(instructorArray[0].indexOf(":")+1);

                //the string with index 1 is the gender
                char gender = instructorArray[1].charAt(0);

                //the string with index 2 is the age
                int age = Integer.parseInt(instructorArray[2]);

                //create a new GUITrainer object with the info from the file
                GUITrainer guiTrainer = new GUITrainer(name, gender, age);

                //add the guiTrainer to the school
                school.add(guiTrainer);
            }
        }
    }

    //main method
    public static void main(String[] args){

        //create a new Administrator object
        Administrator admin = new Administrator();

        //create a new scanner object in order to take a file from the cmd
        Scanner scanner = new Scanner(System.in);

        //file name string to read from the user
        String inputFileName = scanner.next();

        //number of days the user wants the simulation to run
        int inputNumOfDays = scanner.nextInt();

        //call read method to set up the configuration file
        admin.read(inputFileName);

        //run the simulation
        admin.run(inputNumOfDays);
    }
}
